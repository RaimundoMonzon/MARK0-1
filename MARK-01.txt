// ULTRASONIC OBSTACLE AVOIDING CAR BASED ON ARDUINO //

// Before uploading the code you have to install the following necessary library //

// 1. Adafruit Motor Shield library (Note: Do not install the Adafruit Motor Shield V2 Library)
// 2. NewPing Library

// To Install the libraries go to Tools >> Manage Libraries >> Search Library by its name >> Select the install the library //

#include <AFMotor.h>
#include <NewPing.h>

#define TRIG_PIN A1
#define ECHO_PIN A0
#define FOTO_PIN_FRONT A2
#define FOTO_PIN_BACK A3
#define MAX_DISTANCE 200
#define MAX_SPEED 500
#define TURN_SPEED 200
#define LIGHT_THRESHOLD 200

NewPing radar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);

AF_DCMotor motor1(1);
AF_DCMotor motor2(2);

int distance = 100;
volatile bool edgeDetected = false;
volatile bool lightDetected = false;

void setup() {
  motor1.setSpeed(500);
  motor2.setSpeed(500);

  stopMovement();

  delay(1000);
  distance = checkDistance();
  Serial.begin(9600);

  // Light Detector SetUp
  pinMode(2, INPUT);  // Front Sensor
  pinMode(3, INPUT);  // Back Sensor

  attachInterrupt(digitalPinToInterrupt(2), checkLightLevelFront, CHANGE);
  attachInterrupt(digitalPinToInterrupt(3), checkLightLevelBack, CHANGE);
}

void loop() {
  distance = checkDistance();

  if (distance >= 30) {
    findTarget();
  } else {
    moveForward();
  }
}

void findTarget() {

  turnLeft();

  do {
    distance = checkDistance();
  } while (distance >= 30);

  stopMovement();
  Serial.println("Target Found While Turning Left!");
}

int checkDistance() {
  delay(50);  // Brief pause to avoid overwhelming the sensor
  int cm = radar.ping_cm();
  Serial.print("Distance: ");
  Serial.println(cm);
  return cm;
}

void checkLightLevelBack() {
  delay(10000);
  int currentLightLevel = analogRead(FOTO_PIN_BACK);
  Serial.print(currentLightLevel);

  if (currentLightLevel < LIGHT_THRESHOLD) {
    stopOnEdgeBack();
    Serial.println("Light level below threshold, stopping robot.");
  }
}

void checkLightLevelFront() {
  delay(10000);
  int currentLightLevel = analogRead(FOTO_PIN_FRONT);
  Serial.print(currentLightLevel);

  if (currentLightLevel < LIGHT_THRESHOLD) {
    stopOnEdgeFront();
  }
}

void stopMovement() {
  motor1.run(RELEASE);
  motor2.run(RELEASE);
  Serial.println("Motors stopped");
}

void stopOnEdgeFront() {
  moveBackward();
  delay(100);
  turnRight();
  delay(100);
  moveBackward();
  edgeDetected = false;
}

void stopOnEdgeBack() {
  moveForward();
  delay(100);
  turnRight();
  delay(100);
  moveForward();
  delay(100);
  turnLeft();
  delay(100);
  moveForward();
  edgeDetected = false;
}

void moveForward() {
  motor1.setSpeed(MAX_SPEED);
  motor2.setSpeed(MAX_SPEED);
  motor1.run(BACKWARD);
  motor2.run(FORWARD);
  // Serial.println("Moving Forward");
}

void moveBackward() {
  motor1.setSpeed(MAX_SPEED);
  motor2.setSpeed(MAX_SPEED);
  motor1.run(FORWARD);
  motor2.run(BACKWARD);
  // Serial.println("Moving Backwards");
}

void turnLeft() {
  motor1.setSpeed(TURN_SPEED);  // Slow down the motors for turning
  motor2.setSpeed(TURN_SPEED);
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  // Serial.println("Moving Left");
}

void turnRight() {
  motor1.setSpeed(TURN_SPEED);  // Slow down the motors for turning
  motor2.setSpeed(TURN_SPEED);
  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  // Serial.println("Moving Right");
}